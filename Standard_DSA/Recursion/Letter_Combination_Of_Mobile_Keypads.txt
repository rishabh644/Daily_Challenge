Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


void my_ans(unordered_map<int,vector<char>>&ump,vector<string>&ans,string temp,string digits,int ind)
{
    
    if(ind==digits.size())
    {
        
        ans.push_back(temp);
        return;
        
    }
    
    for(int i=0;i<ump[digits[ind]-'0'].size();i++)
    {
        my_ans(ump,ans,temp+ump[digits[ind]-'0'][i],digits,ind+1);
    }

    
     
}

class Solution {
public:
    vector<string> letterCombinations(string digits) {
    if(digits.size()==0)
    return {};

    unordered_map<int,vector<char>>ump;
    ump[2]={'a','b','c'};
    ump[3]={'d','e','f'};
    ump[4]={'g','h','i'};
    ump[5]={'j','k','l'};
    ump[6]={'m','n','o'};
    ump[7]={'p','q','r','s'};
    ump[8]={'t','u','v'};
    ump[9]={'w','x','y','z'};

    vector<string>ans;
    string temp="";

    my_ans(ump,ans,temp,digits,0);


    
    return ans;
   
    }
};