You are given an array nums of positive integers and a positive integer k.

A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.

Return the number of non-empty beautiful subsets of the array nums.

A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

class Solution {
public:
    int beautifulSubsets(vector<int>& nums, int k) {
      
      // Frequency map to track elements

      unordered_map<int,int>freqMap;

      // sort nums array

      sort(nums.begin(),nums.end());

      return countBeautifulSubsets(nums,k,freqMap,0)-1;

    }
private:
    int countBeautifulSubsets(vector<int>&nums,int difference,unordered_map<int,int>&freqMap,int i)
    {
      // Base case: Return 1 for a subset of size 1
      if(i==nums.size())
      return 1;

      // Count subsets where nums[i]  is not taken

      int totalCount=countBeautifulSubsets(nums,difference,freqMap,i+1);

      if(!freqMap[nums[i]-difference]){
        freqMap[nums[i]]++;
         // Recursively count subsets where nums[i] is taken
            totalCount += countBeautifulSubsets(nums, difference, freqMap,
                                                i + 1);  // nums[i] taken
            freqMap[nums[i]]--;
      }

return totalCount;

    }
};