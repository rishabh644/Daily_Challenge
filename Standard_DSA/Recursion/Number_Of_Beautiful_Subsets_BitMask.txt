You are given an array nums of positive integers and a positive integer k.

A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.

Return the number of non-empty beautiful subsets of the array nums.

A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

class Solution {
public:
    int beautifulSubsets(vector<int>& nums, int k) {
      
      return countBeautifulSubsets(nums,k,0,0);

    }
private:
    int countBeautifulSubsets(vector<int>&nums,int difference,int index,int mask)
    {
        // Base case: Return 1 if mask is greater than 0
        if(index==nums.size()) return mask>0?1:0;

        // Flag to check if the current subset is beautiful

        bool isBeautiful=true;

        for(int j=0;j<index && isBeautiful;++j){
            isBeautiful=((1<<j) & mask)==0 || abs(nums[j]-nums[index])!=difference;
        }
        // Recursively calculate beautiful subsets including and excluding the current number

        int skip=countBeautifulSubsets(nums,difference,index+1,mask);

        int take;

        if(isBeautiful){
            take=countBeautifulSubsets(nums,difference,index+1,mask+(1<<index));
        }
        else
        {
            take=0;
        }        
        
        return skip+take;


    }
};