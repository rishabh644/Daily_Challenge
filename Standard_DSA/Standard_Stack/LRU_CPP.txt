struct Node{

    int key;
    int value;
    struct Node* prev=NULL;
    struct Node* next=NULL;
    
    Node(int a,int b){
        key=a;
        value=b;
    }
    
    
};



class LRUCache {
public:
    int capacity;
    struct Node* head=new Node(-1,-1); //dummy head
    struct Node* tail=new Node(-1,-1); //dummy tail
    unordered_map<int,struct Node*>ump;
    LRUCache(int cp) {
       capacity=cp;
       head->next=tail;
       tail->prev=head;
    }
void delete_node(struct Node* temp)
{
    struct Node* prev=temp->prev;
    
    prev->next=temp->next;

    temp->next->prev=prev;
}

void add_node(struct Node* node)
{
     node->next=head->next;
     head->next->prev=node;
     node->prev=head;
     head->next=node;

}
    
    int get(int key) {
        
        if(ump.find(key)!=ump.end())
        {
            struct Node* temp=ump[key];
            delete_node(temp);
            add_node(temp);
            return temp->value;
        }
        else
        {
            return -1;
        }


    }
    
    void put(int key, int value) {
        if(ump.find(key)!=ump.end())
        {
            struct Node* temp=ump[key];
            delete_node(temp);
            temp->value=value;
            add_node(temp);
        }
        else
        {
            if(ump.size()==capacity)
            {
                struct Node* temp=tail->prev;
                delete_node(temp);
                ump.erase(temp->key);
            }
            struct Node* temp=new Node(key,value);
            add_node(temp);
            ump[key]=temp;
        }
    }
};
s