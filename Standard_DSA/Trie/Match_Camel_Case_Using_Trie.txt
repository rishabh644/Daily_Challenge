struct TrieNode
{
    TrieNode* children[ALPHABET_SIZE];
    
    bool isLeaf;
    
    vector<string>word;
};

TrieNode* getNewTrieNode()
{
    TrieNode* pNode=new TrieNode;
    
    if(pNode)
    {
        pNode->isLeaf=false;
        
        for(int i=0;i<ALPHABET_SIZE;i++)
        {
            pNode->children[i]=NULL;
        }
        
    }
    
    return pNode;
    
}


void insert(TrieNode* root,string word)
{
    int index;
    
    TrieNode* pCrawl=root;
    
    for(int level=0;level<word.length();level++)
    {
        if(islower(word[level]))
        continue;
        
        index=word[level]-'A';
        
        if(!pCrawl->children[index])
        pCrawl->children[index]=getNewTrieNode();
        
        pCrawl=pCrawl->children[index];
    }
    
    // marking last node as leaf
    
    pCrawl->isLeaf=true;
    
    (pCrawl->word).push_back(word);
    
}

void printAllWords(TrieNode* root)
{
   
   // if current node is leaf
   
   if(root->isLeaf)
   {
       sort((root->word).begin(),(root->word).end());
       
       for(string str:root->word)
       cout<<str<<" ";
   }
   
   // recursing for all children of root node
   
   for(int i=0;i<ALPHABET_SIZE;i++)
   {
       TrieNode* child=root->children[i];
       if(child)
       printAllWords(child);
   }
    
}


bool search(TrieNode* root,string pattern)
{
   int index;
   TrieNode* pCrawl=root;
   
   for(int level=0;level<pattern.length();level++)
   {
       index=int(pattern[level])-'A';
       
       if(!pCrawl->children[index])
       return false;
       
       pCrawl=pCrawl->children[index];
       
       
   }
   
   printAllWords(pCrawl);
       
       return true;
    
}








class Solution
{
    public:
    //Function to print all words in the CamelCase dictionary 
    //that matches with a given pattern.
    void findAllWords(vector<string> dict, string pattern) 
    {
        
       //constructing Trie root node.
       
       TrieNode* root=getNewTrieNode();
       
       for(string word:dict)
       {
           insert(root,word);
       }
       
       // searching for pattern in Trie
       
       if(!search(root,pattern))
       {
           cout<<"No match found";
       }
        
        
        
    }
};