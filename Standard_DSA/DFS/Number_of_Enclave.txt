void dfs(int x,int y,vector<vector<int>>& grid,vector<vector<int>>&visited,bool& boundary,int& count)
{

     if(x<0 || x>=grid.size() || y<0 || y>=grid[0].size() || grid[x][y]==0 || visited[x][y]==1)
    return;

    if(x==0 || x==grid.size()-1 || y==0 || y==grid[0].size()-1)
    boundary=true;

   

    count+=1;
    visited[x][y]=1;
    dfs(x+1,y,grid,visited,boundary,count);
    dfs(x-1,y,grid,visited,boundary,count);
    dfs(x,y+1,grid,visited,boundary,count);
    dfs(x,y-1,grid,visited,boundary,count);
    

}

class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
      

      int m=grid.size();
      int n=grid[0].size();
    
      vector<vector<int>>visited(m,vector<int>(n,0));

      int ans=0;

      int count=0;

      bool boundary=false;

      for(int i=0;i<m;i++)
      {
           
        for(int j=0;j<n;j++)
        {
            if(grid[i][j]==1 && visited[i][j]==0)
            {   
                 count=0;
                 boundary=false;
                dfs(i,j,grid,visited,boundary,count);
                if(!boundary)
                {ans+=count;}
            }

              
        }


      }   
       
      
      return ans;


    }
};