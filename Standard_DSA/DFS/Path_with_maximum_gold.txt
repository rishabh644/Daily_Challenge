vector<pair<int,int>>mov={{0,-1},{0,1},{-1,0},{1,0}};


int dfs(vector<vector<int>>&grid,int i,int j,int m,int n)
{
      if(i<0 || j<0 || i>=m || j>=n || grid[i][j]<=0 )
      return 0;

      
      
      grid[i][j]=-1*grid[i][j];
      int x,y;
      int mxdfs=0;

      for(auto mv:mov)
      {
          x=i+mv.first;
          y=j+mv.second;
          mxdfs=max(mxdfs,dfs(grid,x,y,m,n));
      }
      
      grid[i][j]=-1*grid[i][j];

      return grid[i][j]+mxdfs;

}

class Solution {
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        
        int m=grid.size();
        int n=grid[0].size();

        int ans=0;
        int i,j;

        vector<vector<int>>visited(m,vector<int>(n,0));
        vector<vector<int>>cost(m,vector<int>(n,0));

        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
                if(grid[i][j]>0)
                {
                    ans=max(ans,dfs(grid,i,j,m,n));
                }
            }

        } 
        
        return ans;

    }
};