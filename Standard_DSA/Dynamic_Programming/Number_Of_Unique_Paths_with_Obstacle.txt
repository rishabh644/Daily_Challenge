int my_uniquePathWithObstacle(vector<vector<int>>&grid,vector<vector<int>>&obstacle,int i,int j,int m,int n)
{
   if(i>=m || j>=n)
   return 0;


   if(obstacle[i][j]==1)
   return 0; 

   if(i==m-1 && j==n-1)
   return 1;
   
   if(grid[i][j]!=0)
   return grid[i][j];

   grid[i][j]=my_uniquePathWithObstacle(grid,obstacle,i+1,j,m,n)+my_uniquePathWithObstacle(grid,obstacle,i,j+1,m,n);

   return grid[i][j];    
}

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();

        vector<vector<int>>grid(m,vector<int>(n,0));

        return my_uniquePathWithObstacle(grid,obstacleGrid,0,0,m,n);


    }
};