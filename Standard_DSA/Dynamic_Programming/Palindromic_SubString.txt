Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

//Brute Force
class Solution:
    def isPalindrome(self,s:str,i:int,j:int):
        while i<j:
            if(s[i]!=s[j]):
                return False
            i+=1
            j-=1
        return True
    def countSubstrings(self, s: str) -> int:
        count=0

        for i in range(len(s)):
            count+=1
            for j in range(i+1,len(s)):
                if self.isPalindrome(s,i,j):
                    count+=1
        return count
// Optimized

class Solution {
public:
    int countSubstrings(string s) {
        

        int n=s.size();

        vector<vector<int>>dp(n,vector<int>(n,0));
        
        int count=0;

        for(int i=0;i<n;i++)
        {
            count++;
            dp[i][i]=1;
        }
        for(int length=2;length<=n;length++)
        {
            for(int i=0;i<=(n-length);i++)
            {
                int j=i+length-1;

                if(s[i]==s[j] && (length==2 || dp[i+1][j-1]==1))
                {
                    count++;
                    dp[i][j]=1;
                                    
                }
            }
        }

        return count;
          
    }
};

// Middle expansion
    int countSubstrings(string s) {
        

        int n=s.size();

        int ans=0;

        for(int i=0;i<n;i++){

            int even=palindromeCount(s,i,i+1);
            int odd=palindromeCount(s,i-1,i+1);

            ans+=even+odd+1;
        }
        return ans;
    }
    int palindromeCount(string s,int l,int r)
    {
        int count=0;
        while(l>=0 && r<s.length() && s[l--]==s[r++]){
            count++;
        }

        return count;
    }