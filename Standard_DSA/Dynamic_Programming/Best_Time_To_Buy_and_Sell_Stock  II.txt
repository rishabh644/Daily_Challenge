You are given an integer array prices where prices[i]
is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock.
You can only hold at most one share of the stock at any time.
However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

int maxProfit(vector<int>& prices)
   {

       int n=prices.size();
       if(n==1)
       return 0;

       int profit=0;
       int currmin=prices[0];
       int i=1;

       while(i<n)
       {
          profit+=(prices[i]>currmin)?(prices[i]-currmin):0;
          currmin=prices[i];
          i++;
       }

       return profit;

   }

/////---- Different approach----/////

int maxProfit(int[] prices){

int i=0;
int buy;
int sell;
int profit=0;
int N=prices.length-1;

while(i<N) {

      while(i<N && prices[i+1]<=prices[i])i++;
      buy=prices[i];

      while(i<N && prices[i+1]>prices[i]) i++;
      sell=prices[i];

      profit+=(sell-buy);

           }

return profit;
                            }

//////****************///////
int maxProfit(vector<int>& prices)
{

    // It is impossible to sell stock on first day,
    // set-infinity as initial value for curHold

    int curHold=INT_MIN;
    int curNotHold=0;

    for(const int stockPrice:prices)
    {

       int prevHold=curHold;
       int prevNotHold=curNotHold;

       //either keep hold, or buy in stock today at stock price
       curHold=max(prevHold,prevNotHold-stockPrice);

       // either keep not-hold,or sell out stock at stock price
       curNotHold=max(prevNotHold,prevHold+stockPrice);
    }

    // Max profit must come from notHold state finally
    return curNotHold;

}
