Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

string shortestCommonSupersequence(string str1, string str2) {
        
        int dp[1001][1001]={};
        int m=str1.size();
        int n=str2.size();

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                dp[i+1][j+1]=a[i]==b[j]?dp[i][j]+1:max(dp[i][j+1],dp[i+1][j]);
            }
        }

        string res;

        while(m && n)
        {
           if(dp[m][n]==dp[m-1][n])
           {
            res+=a[--m]; // Character only in a
           }
           else if(dp[m][n]==dp[m][n-1])
           {
            res+=b[--n]; // Character only in b
           }
           else
           {
            res+=min(a[--m],b[--n]); // Shared character in a & b
           }

        }

        return a.substr(0,m)+b.substr(0,n)+string(rbegin(res),rend(res));             
    }

// Above was space optimized

// Below is not space optimized

string shortestCommonSupersequence(string str1, string str2) {
        
        int i=0;
        int j=0;

        string res="";

        for(char c:lcs(str1,str2)){
            while(str1[i]!=c)
            res+=str1[i++];
            while(str2[j]!=c)
            res+=str2[j++];
            res+=c,i++,j++;
        }

        return res+str1.substr(i)+str2.substr(j);
    }

    string lcs(string& A,string& B){
           int n=A.size();
           int m=B.size();
        
           vector<vector<string>>dp(n+1,vector<string>(m+1,""));
           
           for(int i=0;i<n;++i)
           {
              for(int j=0;j<m;++j)
              {
                if(A[i]==B[j])
                {
                    dp[i+1][j+1]=dp[i][j]+A[i];
                }
                else
                {
                    dp[i+1][j+1]=dp[i + 1][j].size() > dp[i][j + 1].size() ?  dp[i + 1][j] : dp[i][j + 1];
                }
              }
           }
           return dp[n][m];
    }
};