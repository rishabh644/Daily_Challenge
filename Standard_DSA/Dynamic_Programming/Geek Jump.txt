Geek wants to climb from the 0th stair to the (n-1)th stair.
 At a time the Geek can climb either one or two steps.
 A height[N] array is also given. Whenever the geek jumps from stair i to stair j,
 the energy consumed in the jump is abs(height[i]-height[j]),where abs() means the
absolute difference, return the minimum energy that can be used by the Geek to jump
 from stair 0 to stair N-1.

int my_dfs(vector<int>&height,vector<int>&ans,int i)
{
    if(ans[i]!=-1)
    return ans[i];


    if(i==1)
    {
        ans[i]=abs(height[1]-height[0]);

    }
    else if(i==0)
    {
        ans[i]=0;
    }
    else
    {

    ans[i]=min(abs(height[i]-height[i-1])+my_dfs(height,ans,i-1),abs(height[i]-height[i-2])+my_dfs(height,ans,i-2));

    }

    return ans[i];

}

class Solution {
  public:
    int minimumEnergy(vector<int>& height, int n) {
        // Code here


        vector<int>ans(n,-1);

        my_dfs(height,ans,n-1);

        return ans[n-1];

    }
};