You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

int maxProfit(vector<int>& prices) {


        int profit=0;
        int cp=prices[0];

        int i=1;

        while(i<prices.size())
        {

            if(prices[i]>cp)
            {
                profit=max(profit,prices[i]-cp);

            }
            else
            {cp=prices[i];
            }
            i+=1;
        }

       return profit;

    }
/////************//////
    int maxProfit(vector<int>& prices) {

        int n=prices.size();

        if(n==1)
        return 0;

        int maxprofit=0;
        int curmin=prices[0];

        int i=1;

        while(i<n)
        {
            maxprofit=max(maxprofit,prices[i]-curmin);

            curmin=min(prices[i],curmin);

            i++;
        }

        return maxprofit;

    }
///////*********/////////
int maxProfit(vector<int>& prices) {

        int n=prices.size();

        if(n==1)
        return 0;

        int maxprofit=0;
        int curmin=prices[0];

        int i=1;

        while(i<n)
        {
            maxprofit=max(maxprofit,prices[i]-curmin);

            curmin=min(prices[i],curmin);

            i++;
        }

        return maxprofit;

    }
///---Using Kadane Algorithm---///
    int maxProfit(vector<int>& prices) {

        int maxCur=0;
        int maxSoFar=0;

        for(int i=1;i<prices.size();i++)
        {
            maxCur=max(0,maxCur+=(prices[i]-prices[i-1]));
            maxSoFar=max(maxCur,maxSoFar);
        }

        return maxSoFar;
    }
///---