Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character

// Bottom Up Memoization
int minDistance(string word1, string word2) {
        

        int m=word1.size();
        int n=word2.size();

        vector<vector<int>>dp(m+1,vector<int>(n+1,0));

        for(int i=1;i<=m;i++)
        {
            dp[i][0]=i;
        }
        for(int j=1;j<=n;j++)
        {
            dp[0][j]=j;
        }
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(word1[i-1]==word2[j-1])
                dp[i][j]=dp[i-1][j-1];
                else
                dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
            }
        }
         

      

        return dp[m][n];

    }
///------------------------------///
int minDistance(string word1, string word2) {
    int m = word1.size();
    int n = word2.size();

    // Special cases: if either string is empty
    if (m == 0) return n;
    if (n == 0) return m;

    // Two rows for DP: previous and current
    vector<int> prev(n + 1, 0), curr(n + 1, 0);

    // Initialize the first row (transforming an empty string into word2)
    for (int j = 0; j <= n; j++) {
        prev[j] = j;
    }

    for (int i = 1; i <= m; i++) {
        // Initialize the first column of the current row
        curr[0] = i;

        for (int j = 1; j <= n; j++) {
            if (word1[i - 1] == word2[j - 1]) {
                curr[j] = prev[j - 1]; // No new operation needed
            } else {
                curr[j] = 1 + min(prev[j - 1], min(prev[j], curr[j - 1])); // Minimum of substitution, deletion, or insertion + 1
            }
        }

        // Swap current row with previous row
        swap(prev, curr);
    }

    // The last processed row (prev) contains the result
    return prev[n];
} 

// More space optimized
    int minDistance(string word1, string word2) {
        

        int m=word1.size();
        int n=word2.size();

        if(m==0)return n;
        if(n==0)return m;

        //Single row for DP

        vector<int>dp(n+1,0);
        

        // Initialize the first row (transforming an empty string into word2)
        
        for(int j=0;j<=n;j++)
        {
            dp[j]=j;
        }

        for(int i=1;i<=m;i++)
        {
            int prev=dp[0];// This will be dp[i-1][j-1] for the first element
            dp[0]=i;// Initialize the first column for the current row
            for(int j=1;j<=n;j++)
            {
               int temp=dp[j];// Save current dp[j] which will be dp[i-1][j]

               if(word1[i-1]==word2[j-1]){
                dp[j]=prev; // No new operation needed
               }
               else
               {
                dp[j]=1+min(prev,min(dp[j],dp[j-1])); // Min of substitution,deletion,insertion
               }
               prev=temp;              
            }
            
        }
       
       // The last processed row(prev) contains the result

       return dp[n];
       
    }