There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array cardPoints and the integer k, return the maximum score you can obtain.

class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {

        int n=cardPoints.size();

        vector<vector< vector<int> > >memo(n+1,vector<vector<int>>(n+1,vector<int>(k,-1)));

        return max(cardPoints[0]+mymaxScore(cardPoints,1,n-1,k-1,n,memo),cardPoints[n-1]+mymaxScore(cardPoints,0,n-2,k-1,n,memo));        
        

    }
private:
     int mymaxScore(vector<int>&cardPoints,int i,int j,int k,int n,vector<vector< vector<int> > >&memo)
     {  
        if(k==0)
        return 0;

        if(memo[i][j][k]!=-1)
        return memo[i][j][k];

        memo[i][j][k]=max(cardPoints[i]+mymaxScore(cardPoints,i+1,j,k-1,n,memo),cardPoints[j]+mymaxScore(cardPoints,i,j-1,k-1,n,memo));
        
        return memo[i][j][k];
     }
};

--------------------------------*******---------------------------
class Solution {
public:
   

        // Key here is realizing that only 1st K and last k elements are relevant so calculating the sums from them.
        // TC:O(n), SC:O(n)

        int maxScore(vector<int>& cardPoints,int k)
        {
            int n=cardPoints.size();
            int maxScore=0;

            vector<int>front(k+1);
            vector<int>rear(k+1);

            // calculate prefix sum of the 1st k elements in front and last k elements in rear
            // arr:[1,2,3,4,5,6,1], k=3
            // front:[0,1,3,6], rear:[0,1,7,12]

            for(int i=0;i<k;i++)
            {
                front[i+1]=front[i]+cardPoints[i];
                rear[i+1]=rear[i]+cardPoints[n-1-i];
            }
            
            for(int i=0;i<=k;i++){
               int currentScore=front[i]+rear[k-i];
               maxScore=max(maxScore,currentScore);

            }
        
           return maxScore;

        }
        

    

};
///
Space optimized DP
 int maxScore(vector<int>& cardPoints,int k)
        {
            int n=cardPoints.size();
            
            int front=0;
            int rear=0;
            
            //frontScore is initialized to the sum of the first K cards in the array, and rearScore is initialized to 0.

            for(int i=0;i<k;i++)
            {
                front+=cardPoints[i];
            }

            int maxScore=front,currentScore;

            //Iterate backwards from i=k-1 -> 0. At each iteration, we calculate the score by selecting i cards from the beginning
            // of the array and k-i cards from the end (currentScore). If this score is greater than maxScore, we update it.
            
            for(int i=k-1;i>=0;i--)
            {
                front-=cardPoints[i];
                rear+=cardPoints[n-(k-i)];

                currentScore=front+rear;
                maxScore=max(currentScore,maxScore);
            }

            return maxScore;

            
        }