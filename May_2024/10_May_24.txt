You are given a sorted integer array arr containing 1 and prime numbers,where all the integers of arr are unique.You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].


bool my_cmp(pair<pair<int,int>,float>a,pair<pair<int,int>,float>b)
{
  
  if(a.second<b.second)
  return true;
  else
  return false;

}

class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        
       vector<pair<pair<int,int>,float>>vec;
       int i=0,j;
       pair<int,int>pr;
       int t;
       int n=arr.size();
       for(i=0;i<(n-1);i++)
       { 
            for(j=i+1;j<n;j++)
            {
                pr={arr[i],arr[j]};
                vec.push_back({pr,(arr[i]*1.0)/arr[j]});
            }
       }

       sort(vec.begin(),vec.end(),my_cmp);

    //    for(i=0;i<vec.size();i++)
    //    {
    //     cout<<vec[i].first.first<<" "<<vec[i].first.second<<endl;
    //    }

       return {vec[k-1].first.first,vec[k-1].first.second};

    }
};s